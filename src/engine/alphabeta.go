package engine

import (
	"math"

	"github.com/Droanox/ChessEngineAI/src/board"
	"github.com/Droanox/ChessEngineAI/src/eval"
)

func alphabeta(alpha int, beta int, depth int, flag int, cb *board.ChessBoard) int {
	// pvLength[board.Ply] is used to store the length of the principal variation
	pvLength[board.Ply] = board.Ply

	// pvNode is used to determine if the node is a PV node
	var pvNode bool = beta-alpha > 1

	// apply 3 move repetition rule and 50 move rule
	if board.Ply > 0 && board.IsRepetition() || board.HalfMoveClock >= 100 {
		return 0
	}

	// when the depth is 0, we call quiescence search to search for captures
	if depth == 0 {
		return quiescence(alpha, beta, cb)
	}

	// increment the number of nodes searched
	nodes++

	if board.IsDraw(*cb) {
		return 0
	}

	// Check if the side to move is in check
	// if it is, we increase the depth by 1 Check Extension
	// https://www.chessprogramming.org/Check_Extensions
	var isChecked bool = cb.IsInCheck()
	if isChecked {
		depth++
	}

	// Mate Distance Pruning (MDP)
	// https://www.chessprogramming.org/Mate_Distance_Pruning
	if alpha < -MateValue+board.Ply {
		alpha = -MateValue + board.Ply
	}
	if beta > MateValue-board.Ply {
		beta = MateValue - board.Ply
	}
	if alpha >= beta {
		return alpha
	}

	// hashFlag is used to store the type of the hash entry
	// we dont know the type yet, so we set it to hashFlagAlpha
	var hashFlag int = hashFlagAlpha

	// score is used to store the eval of the position
	var score int

	// bestMove is used to store the best move
	var bestMove board.Move = board.Move{}

	// Transposition Table (TT)
	if score = ReadTT(alpha, beta, depth, &bestMove); score != noHash && !pvNode {
		return score
	}

	// legalMovesNum is used to determine if the position is a checkmate or a stalemate
	var legalMoveAvailable bool = false

	// staticEval is used to store the static evaluation of the position (used for pruning)
	var staticEval int = eval.Eval(*cb)

	// Reverse Futility Pruning
	// https://www.chessprogramming.org/Reverse_Futility_Pruning
	if !pvNode && !isChecked && depth <= 5 {
		var score = staticEval - (eval.PawnValue * depth)
		if score >= beta {
			return staticEval
		}
	}

	// reset old killer moves
	if board.Ply >= 2 {
		killerMoves[1][board.Ply-2] = board.Move{}
		killerMoves[0][board.Ply-2] = board.Move{}
	}

	// Null Move Pruning (NMP)
	// https://www.chessprogramming.org/Null_Move_Pruning
	if (depth >= nullMoveDepth) && (!isChecked) && !eval.IsEndGame(*cb) && !pvNode && flag != NullMovePruningSearch && staticEval >= beta {
		cb.MakeMoveNull()
		// vary reduction base on depth, idea from the CounterGo chess engine
		score = -alphabeta(-beta, -beta+1, depth-(3+(depth/6)), NullMovePruningSearch, cb)
		cb.MakeBoard()

		// check if the search should be stopped, time is checked concurrently
		if IsStopped {
			return 0
		}

		if score >= beta && (score > -MateScore) {
			return beta
		}
	}

	// movelist is used to store the list of moves generated by the GenerateMoves function
	var moveList = []board.Move{}
	// generate all the moves
	cb.GenerateMoves(&moveList)

	// Move ordering
	// https://www.chessprogramming.org/Move_Ordering
	scoreMoves(&moveList, bestMove)

	// set the score to the lowest possible value
	score = minScore

	// isQuiet is used to determine if the move is a quiet move
	var isSafe bool

	// search through the moves
	for i := 0; i < len(moveList); i++ {
		// pick out the next highest scored move
		pickMove(&moveList, i)

		// check if the move is a capture or a promotion (KnightPromotionCapture counts as both)
		isSafe = moveList[i].GetMoveFlags()&board.MoveKnightPromotionCapture == 0

		// futility pruning
		// https://www.chessprogramming.org/Futility_Pruning
		if depth <= 5 &&
			isSafe &&
			!isChecked &&
			score > -MateScore &&
			staticEval+(eval.PawnValue*(depth+1)) <= alpha {
			continue
		}

		// make the move
		if !cb.MakeMove(moveList[i]) {
			continue
		}

		// change legalmove for checkmate and stalemate detection
		legalMoveAvailable = true

		// full depth search
		if i == 0 {
			score = -alphabeta(-beta, -alpha, depth-1, StandardSearch, cb)
		} else {
			// if the move satisfies the LMR conditions, we search deeper
			// LMR
			// https://www.chessprogramming.org/Late_Move_Reductions
			if (depth >= reductionLimit) &&
				(i >= fullDepthMoves) &&
				isSafe &&
				!isChecked &&
				!cb.IsInCheck() &&
				!(pvNode && (flag == PVSSearch || flag == LMRSearch)) {
				reduction := int(math.Sqrt(float64(depth-1)) + math.Sqrt(float64(i-1)))
				if pvNode {
					reduction -= 2
				}
				reduction = Max(0, Min(reduction, depth-2))
				score = -alphabeta(-alpha-1, -alpha, depth-reduction, LMRSearch, cb)
			} else {
				score = alpha + 1
			}
			// if the move fails high, we search deeper
			// PVS
			// https://www.chessprogramming.org/Principal_Variation_Search
			if score > alpha {
				score = -alphabeta(-alpha-1, -alpha, depth-1, PVSSearch, cb)
				if (score > alpha) && (score < beta) {
					score = -alphabeta(-beta, -alpha, depth-1, PVSSearch, cb)
				}
			}
		}

		// unmake the move
		cb.MakeBoard()

		// check if the search should be stopped, time is checked concurrently
		if IsStopped {
			return 0
		}

		// found a better move
		if score > alpha {
			hashFlag = hashFlagExact

			bestMove = moveList[i]

			alpha = score

			pvTable[board.Ply][board.Ply] = bestMove
			for j := board.Ply + 1; j < pvLength[board.Ply+1]; j++ {
				pvTable[board.Ply][j] = pvTable[board.Ply+1][j]
			}
			pvLength[board.Ply] = pvLength[board.Ply+1]

			// fails high
			if score >= beta {
				WriteTT(score, depth, hashFlagBeta, bestMove)

				if isSafe {
					if moveList[i] != killerMoves[0][board.Ply] {
						killerMoves[1][board.Ply] = killerMoves[0][board.Ply]
						killerMoves[0][board.Ply] = moveList[i]
					}

					hhScore[moveList[i].GetMoveStart()][moveList[i].GetMoveEnd()] += 1
				}

				return score
			} else {
				if isSafe {
					bfScore[moveList[i].GetMoveStart()][moveList[i].GetMoveEnd()] += 1
				}
			}
		}
	}

	// check for checkmate and stalemate
	if !legalMoveAvailable {
		if isChecked {
			return -MateValue + board.Ply
		} else {
			return 0
		}
	}

	if hashFlag == hashFlagExact {
		WriteTT(score, depth, hashFlag, bestMove)
	} else {
		WriteTT(alpha, depth, hashFlag, bestMove)
	}

	// fails low
	return alpha
}
